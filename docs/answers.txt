Date when I went through the GitLab Tutorials:october 15th 2024

Date when I set up the GitHub account: August 2018
       


1. Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 553 bytes | 553.00 KiB/s, done.
Total 4 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/laurenchapman/assignment2.git
   f4975e5..17a77c2  master -> master

2. git rev-list --all --count    8
 
3. git log -1 --format=%cd README.md

   Wed Sep 25 18:33:08 2019 -0400

4. Isolation of Features: Branches allow developers to work on new features, bug fixes, or experiments in isolation from the main project, preventing unfinished code from affecting the main codebase.
   Parallel Development: Teams can work in parallel by using branches for different tasks, allowing multiple developers to contribute without overwriting each otherâ€™s work.

5. git log: Shows the history of commits made in the repository, including commit messages, author names, dates, and commit hashes.
   git status: Shows the current status of the working directory and staging area, listing changes that are staged for the next commit, unstaged changes, and untracked files.

6. git log -- Vehicle.h
 
7. git log --grep="file"

8. Inheritance: Inheritance is a mechanism where one class (subclass) acquires the properties and behavior (methods) of another class (superclass), allowing for code reuse and the creation of a hierarchical relationship between classes.
   Polymorphism: Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables one method or operation to behave differently based on the object that calls it (e.g., method overriding).
   Encapsulation: Encapsulation is the bundling of data (attributes) and methods that operate on that data into a single unit or class, and restricting access to some of the object's components, typically through the use of private fields and public methods.

9. In the Dictator and Lieutenants workflow, there is a hierarchy where Lieutenants act as intermediaries between contributors and the Dictator, while in the Integration Manager workflow, the integration manager directly manages all contributions without intermediaries.

10.In a team of 100 developers, the Dictator and Lieutenants workflow distributes the workload, reducing bottlenecks and allowing for better scalability than the Centralized workflow. Lieutenants review and merge changes before passing them to the Dictator, improving code quality and resolving conflicts early. This structure also promotes efficient collaboration by organizing developers into smaller, manageable groups, leading to smoother integration and fewer conflicts in the main branch.
